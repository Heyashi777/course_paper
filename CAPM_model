import pandas as pd
import plotly.graph_objs as go
import numpy as np
from plotly.subplots import make_subplots
import csv
import matplotlib.pyplot as plt 

name_stonks = ['ALRS', 'BSPB', 'CHMF', 'FEES', 'GAZP', 'GMKN', 'HYDR', 'IRAO','LKOH', 'LSRG', 'MAGN', 'MOEX',
              'MSNG', 'MTLR', 'MTSS', 'MVID','NLMK', 'NVTK', 'PHOR', 'PIKK', 'PLZL', 'ROSN', 'RTKM', 'SBER',
              'SELG', 'TATN', 'TGKA', 'VTBR'] 

def read_raw_data( name ):
    
    global data_stonks_by_day 
    
    first_part = "/Users/erickgaydin/Desktop/Курсовая/Stonks_10_years/"
    name_part = name
    third_part = ".xlsx"
    local_link = first_part+name_part+third_part
    data_stonks_by_day = pd.concat (pd.read_excel(local_link, sheet_name= None ), ignore_index= True )

def read_raw_data_by_two_days( name ):
    
    global data_stonks_by_day 
    
    first_part = "/Users/erickgaydin/Desktop/Курсовая/Stonks_10_years_by_two_days/"
    name_part = name
    third_part = ".xlsx"
    local_link = first_part+name_part+third_part
    data_stonks_by_day = pd.concat (pd.read_excel(local_link, sheet_name= None ), ignore_index= True )
    
def read_raw_data_by_three_days( name ):
    
    global data_stonks_by_day 
    
    first_part = "/Users/erickgaydin/Desktop/Курсовая/Stonks_10_years_by_three_days/"
    name_part = name
    third_part = "_by_three.xlsx"
    local_link = first_part+name_part+third_part
    data_stonks_by_day = pd.concat (pd.read_excel(local_link, sheet_name= None ), ignore_index= True )
    
def make_table_for_all( classter, number_by_days ):
    
    global main_table
    
    main_table = pd.DataFrame()
    main_table['Date'] = range(800)
    
    for i in range( len(name_stonks) ):
        if number_by_days == 2:
            read_raw_data_by_two_days( name_stonks[i] )
            main_table[name_stonks[i]] = data_stonks_by_day[classter]
            main_table = main_table[:1200]
        elif number_by_days == 3:
            read_raw_data_by_three_days( name_stonks[i] )
            main_table[name_stonks[i]] = data_stonks_by_day[classter]
            main_table = main_table[:800]
        elif number_by_days == 1:
            read_raw_data( name_stonks[i] )
            main_table[name_stonks[i]] = data_stonks_by_day[classter]
            main_table = main_table[:2400]
            
# Функция, которая нормализует данные, то есть, приводит всё к базисному дню
def normalize(df):
    x = df.copy()
    for i in x.columns[1:]:
        x[i] = x[i]/x[i][0]
    return x
# Function to plot interactive plot
def interactive_plot(df, title):
    fig = px.line(title = title)
    for i in df.columns[1:]:
        fig.add_scatter(x = main_table['Date'], y = df[i], name = i)
    fig.show()

def daily_return(df):
    df_daily_return = df.copy()
    for i in df.columns[1:]:
        for j in range(1, len(df)):
            df_daily_return[i][j] = ((df[i][j]- df[i][j-1])/df[i][j-1]) * 100
        df_daily_return[i][0] = 0
    return df_daily_return


make_table_for_all('open', 3)
stocks_daily_return = daily_return(main_table)

beta = {}
alpha = {}
CAPM_by_two = pd.DataFrame()
CAPM_by_two['Beta'] = range(27)
CAPM_by_two['Alfa'] = range(27)
for i in main_table.columns:
    if i != 'Date' and i != 'MOEX':
        #main_table.plot(kind = 'scatter', x = 'MOEX', y = i)
        a = np.polyfit(main_table['MOEX'], main_table[i], 1)[1]
        b = np.polyfit(main_table['MOEX'], main_table[i], 1)[0]
        #plt.plot(main_table['MOEX'], b * main_table['MOEX'] + a, '-', color = 'r')      
        alpha[i] = a  
        beta[i] = b
        CAPM_by_two.at[i,'Beta'] = b
        CAPM_by_two.at[i,'Alfa'] = a     
    #plt.show()
        
keys = list(beta.keys())
ER = {}
rf = 0 
rm = stocks_daily_return['MOEX'].mean() * 252 

for i in keys:
    ER[i] = rf + (beta[i] * (rm-rf))
    
for i in keys:
    print('Expected return, based on CAPM for {} is {}%'.format(i, ER[i]))
